;;------------------------------------
;;
;; A*
;;
;;------------------------------------

turtles-own[
  prefexit
  in-nodes
  out-nodes
  current
  path ;; final path patch list
]

patches-own[
 ;;parcours
 noir
 blanc
 bleu
 vert
 exit
]

to search-turtles
  ask turtles [search]
  tick
end

to search
  while [get-patch current != prefexit] [
  search-step
  ]
  print "Success!!"
  ask patches with [blanc = true] [set blanc false]
  ask patches with [bleu = true] [set bleu false]
  draw-path current
end

to search-step
  set in-nodes merge-nodes generate in-nodes

  set in-nodes sort-nodes in-nodes
  if in-nodes = []
  [stop]
  let proposed first in-nodes
  if (proposed = [])[
    stop
  ]
  set current proposed
  set in-nodes bf in-nodes
  set out-nodes (fput (get-patch current) out-nodes) ;; we only put patches in the out-nodes list

  ask (get-patch current) [if (vert != true)[set bleu true]]
end

to-report generate
  let aset nobody
  set aset ([neighbors] of (get-patch current)) with [obstacle != true and onFire != true];[obstacle = 0]  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ifelse (any? aset) [
    ask aset  [if (blanc != true  and bleu != true)[set blanc true]]
    let lst1 [self] of aset ;; transformer en listes...
                            ;; show (sentence "aset : " lst1)
    set lst1 (remove-nodes lst1 out-nodes) ;; delete nodes which have already been visited
    let result map [ ?1 -> make-node ?1 current ] lst1 ;; make a list of nodes [patch value]
    report result
  ]
  [
    show (sentence "blocked ;-) ")
    report []
  ]
end

to-report sort-nodes [lst-nodes]
   ; let lst sort-by [(cost ?1) < (cost ?2)] lst-nodes
   let lst sort-by [ [?1 ?2] -> (get-val ?1) < (get-val ?2) ] lst-nodes
   if (lst = []) [
     (show "pas de solution !!" )
    report []
   ]
   report lst
end

to-report merge-nodes [lst-new lst-ref]
  let res []
  ;set lst-ref sort-by [(cost ?1) < (cost ?2)] lst-ref
  let lst map get-patch lst-ref
  while [lst-new != []] [
    let node (first lst-new)
    let pos position (get-patch node) lst
    ifelse (pos = false)[
      set res (fput node res)
    ][
      let v 0
      let g 0
      let p current
      ifelse ((cost node) < (cost (item pos lst-ref))) [
        set v get-val node
        set g get-cost node
        set p current
      ][
       set v get-val (item pos lst-ref)
        set g get-cost (item pos lst-ref)
      ]
      ;; reconstruct the node
      set res (fput (list (get-patch node) v g p) res)
      ;; suppress the node from old list
      set lst-ref remove-item pos lst-ref
      set lst map get-patch lst-ref
    ]
    set lst-new (bf lst-new)
  ]
  set res (sentence res lst-ref)
  report res
end

to-report remove-nodes [lst ref-lst]
  let res []
  while [lst != []] [
    if not member? (first lst) ref-lst [
      set res (fput (first lst) res)
    ]
    set lst (bf lst)
  ]
  report res
end

to-report make-node [p n]
  let r 0
    let g 1 + get-cost n
    let h distance-to-goal p
    ;; Note: holds the cost and the parent.
    ;; Used by A* algorithm
    set r (list p h g n)
  report r
end


;;------------------------------------
;;
;; Utilitaires
;;
;;------------------------------------

to draw-path [node]
  while [node != []] [
    set path lput get-patch node path
   ;;ask get-patch node [set pcolor green]
    set node get-parent node
  ]
end

to-report cost [node]
     report (get-cost node)
end

to-report distance-to-goal [p]
  let r 0
  set r [distance p] of prefexit
 ;; show (sentence "distance from " p " to " goal " = " r)
  report r
end

to-report init-current
  report (list patch-here distance-to-goal patch-here 0 [])
end

;; get the patch
to-report get-patch [node]
  report first node
end
;; get the value of the node
to-report get-val [node]
  report item 1 node
end

to-report get-cost [node]
  report item 2 node
end

to-report get-parent [node]
  report item 3 node
end